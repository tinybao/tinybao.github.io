<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[带你进入 Activiti 工作流的世界]]></title>
    <url>%2F2019%2F04%2F14%2F%E5%B8%A6%E4%BD%A0%E8%BF%9B%E5%85%A5-Activiti-%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%9A%84%E4%B8%96%E7%95%8C%2F</url>
    <content type="text"><![CDATA[Activiti 是一个针对企业用户、开发人员 、系统管理员的轻量级工作流业务管理平台，其核心是使用 java 开发的快速 、 稳定的 BPMN2.0 流程引擎 。它可以与 spring 完美集成。 创始人 Tom Baeyens 曾经是 JBoss jBPM 的项目架构师，所以之前接触过 jBPM4 的同学，会觉得 Activiti5 很亲切。 1 工作流生命周期一个完整的工作流生命周期会经过以下 5 个阶段，并迭代循环： 阶段 说明 定义 业务需求人员收集业务需求，然后交由开发人员加工转化为计算机可以识别的流程定义。 发布 开发人员打包各种资源，然后在系统管理平台中发布流程定义（包括流程定义文件 、自定义表单 、 任务监听类等资源 ）。 执行 流程引擎按照事先定义好的流程，以任务驱动的方式予以执行 。 监控 监控依赖执行阶段 。 业务人员在办理任务的同时，引擎会收集每个任务的办理结果，然后根据结果做出处理。 优化 对整个流程的运行结果进行分析，在此基础上进一步改进，并再次开始一个新的周期。 2 BPMNBPMN 是 Business Process Modeling Notation 的简称，即业务流程建模与标注。 BPMN 定义了一个业务流程图，这个流程图被设计用于创建业务流程操作的图形化模型 。 而一个业务流程模型（ Business Process Model ），指一个由图形对象（ graphical objects ）组成的网状图，图形对象包括活动（ activities) 和用于定义这些活动执行顺序的流程控制器（ flow controls ） 。 3 Activiti 特性3.1 MyBatisActiviti 的设计思想是简洁 、 快速 。 所以它选择了MyBatis 作为数据持久层框架，从而可以通过最优的 SQL 语句执行 Command ，仅凭如此就能让引擎在速度上保持最高的性能 。 3.2 服务接口Activiti 提供了 7 个服务接口，都通过 ProcessEngine 来获取，并且支持链式编程风格： 服务接口 说明 RepositoryService 仓库服务，用于管理仓库，比如部署或删除流程定义、读取流程资源等。 IdentifyService 身份服务，管理用户、组以及它们之间的关系。 RuntimeService 运行时服务，管理所有正在运行的流程实例、任务等对象。 TaskService 任务服务，管理任务。 FormService 表单服务，管理和流程、任务相关的表单。 HistroyService 历史服务，管理历史数据。 ManagementService 引擎管理服务，比如管理引擎的配置、数据库和作业等核心对象。 3.3 流程设计器与 jBPM 类似，Activiti 也提供了基于 Eclipse 的流程设计器 —— Eclipse Designer。 此外还有 Signavio 公司为 Activiti 定制的基于 Web 的 流程设计器 —— Activiti Modeler。但是在idea上面则不太友好，编辑会有bug而且需要设置才能避免乱码。 3.4 原生支持 SpringActiviti 可以很容易与 Spring 集成，这对于管理事务和解析表达式来说，非常方便。 3.5 分离运行时数据与历史数据这一特性与 jBPM4 的设计理念一脉相承。这样的设计架构使得引擎可以快速地读取运行时数据，只有在需要时才会从历史表中查询历史数据。 这样可以极大地提高数据的存取效率。 4 Activiti 架构 组件 说明 流程引擎（Activiti Engine） 提供针对 BPMN 2.0 规范的解析；执行 、创建和管理流程实例与任务；以及查询历史记录并根据结果生成报表等功能。 业务模型设计器（Activiti Modeler） 由 Signavio 公司设计实现，适用于业务人员把需求转换为流程定义。 开发模型设计器（Activiti Designer） 开发人员可以导入业务需求人员用业务模型设计器设计的流程定义文件（ XML 格式），这样就可以进一步加工成为可以运行的流程定义信息 。 流程管理器（Activiti Explorer） 用于管理仓库、用户、组、流程实例和任务等流程对象。 流程 REST 服务（Activiti REST） 提供 Restful 风格的服务，允许客户端以 JSON 的数据格式与引擎的 REST API 进行交互。]]></content>
      <tags>
        <tag>activiti</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo+github搭建属于自己的个人博客]]></title>
    <url>%2F2019%2F04%2F11%2FHexo-github%E6%90%AD%E5%BB%BA%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[Hexo+guthub搭建属于自己的个人博客(Mac环境下)因为最近要写博客考虑了很多最后还是选择了自建博客顺便结合一下我的公众号同时发布，下面就介绍一下如何使用hexo+github搭建自己的博客，当然也可以使用码云 速度比github快的多 但是码云的pages很烦每次必须手动去发布一下除非你花钱开通了pro。由于我使用的是mac所以就讲一下mac下的搭建方法。首先你要有一个github账号，怎么注册我就不说了，不会的自行百度。Mac本身自带了git所以这里就不讲git的安装了。 1.安装node由于hexo是基于node.js的一个静态页面博客生成框架(以下就简称node)，所以首先需要安装node，如果不知道自己有没有安装node，打开终端然后输入以下命令来查看是否已经安装了node。 输入命令： 1node -v 如果像下图这样显示版本号则说明已安装node.js 如果没有显示版本号则需要自己安装了，一种方式是从官网下载安装包安装，另一种则是通过brew来安装node，mac下当然推荐使用brew来安装了，首先打开homebrew官网，粘贴主页上的命令到终端即可安装完成. 安装完成后只需要在终端输入 123brew link nodebrew uninstall nodebrew install node 再次输入 node -v 如果显示了版本号，这样就成功的安装了最新版的node.js 2.安装hexo1.使用npm安装hexo 1npm install -g hexo-cli 2.初始化hexo目录 123hexo init &lt;folder&gt; #我的是hexo_site#cd &lt;folder&gt;npm install 新建完成后，指定文件夹的目录如下： 1234567├── _config.yml├── package.json├── scaffolds├── source| ├── _drafts| └── _posts└── themes 下面来简单的介绍一下比较重要的文件 _config.yml：网站的配置文件，可以在此配置大部分参数，主题中也会有一个同名的主题配置文件，稍后讲解。source：资源文件夹是存放用户资源的地方。除 posts 文件夹之外，开头命名为 (下划线)的文件 / 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 public 文件夹，而其他文件会被拷贝过去。themes：主题文件夹，后面我们使用的next主题即会存放在此。_posts：存储你发表在博客上的文章，当Hexo 初始化一个站点时，里面会有一篇默认的博文。 3.Hexo 配置Hexo配置主要在_config.yml文件中，下面是一些简单的配置，更具体详细的配置可以查看Hexo官方文档. paramate description title 网站标题 subtitle 网站副标题 description 网站描述 author 您的名字 language 网站使用的语言 timezone 网站时区。Hexo 默认使用您电脑的时区。时区列表。比如说：America/New_York, Japan, 和 UTC 。 4.部署到github 首先需要安装 hexo-deployer-git 1npm install hexo-deployer-git --save 安装完成后，进入刚才新建的博客文件夹内，我的是hexo_site 5.编辑配置文件 1vim _config.yml 修改_config.yml文件中的配置如下： 12345deploy: type: git repo: &lt;repository url&gt; #你的 【你的名字】.github.io 这一项目的git仓库地址# branch: master message: [message] #可不填写# 注意：在配置所有的yml文件时候包括 theme中的_config.yml，在所有的冒号后面都要加一个空格否则hexo命令会出错，接下来执行以下命令： 123hexo clean #清除hexo g #生成静态页面hexo d #部署到git仓库 现在，登录到你的github pages 上查看你的博客吧。直接在浏览器命令行键入 ： http://&lt;你的GitHub用户名&gt;.github.io 3.主题安装1.可以从官方的主题里面挑选自己喜欢的主题，所有的主题安装方法基本都大同小异具体参照文档来搞，这里就简单介绍一下最核心的几点，首先切换到hexo文件夹下： 12cd hexo-site #cd到自己的站点 我的是hexo-site#git clone https://github.com/huyingjie/hexo-theme-A-RSnippet.git themes/a-rsnippet #拉取主题到本地 themes文件夹下 然后修改_config.yml配置文件： 1vim _config.yml 切换主题为刚才下载的 a-rsnippet ： 然后esc :wq 保存 接着我们来更新到git 123hexo cleanhexo ghexo d 然后打开你的博客地址 你的用户名.github.io 就可以查看效果了，具体详细的配置请根据不同主题的文档来修改，这里就不一一介绍了。 enjoy!!]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
</search>
